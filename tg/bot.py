from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
TOKEN = "8154058376:AAHAyHP7qQ4qb_XL3nRfZLNHM1OI47JuVzc"

# –í–∞—à Telegram ID –¥–ª—è –∑–∞—è–≤–æ–∫ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID)
ADMIN_ID = "1003491320"

# –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
WEB_APP_URL = "https://makintoshde.github.io/EasySite/#about"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EasySite! –Ø –ø–æ–º–æ–≥—É –∑–∞–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç:\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏ '–ö–∞—Ç–∞–ª–æ–≥ –¥–∏–∑–∞–π–Ω–æ–≤', —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –¥–∏–∑–∞–π–Ω.\n"
        "3Ô∏è‚É£ –ù–∞–ø–∏—à–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç.\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏ '‚úâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'! üòä"
    )
    keyboard = [
        [InlineKeyboardButton("üìÇ –ö–∞—Ç–∞–ª–æ–≥ –¥–∏–∑–∞–π–Ω–æ–≤", web_app=WebAppInfo(url=WEB_APP_URL))],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"), InlineKeyboardButton("‚úâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /catalog
async def catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÇ –ö–∞—Ç–∞–ª–æ–≥ –¥–∏–∑–∞–π–Ω–æ–≤", web_app=WebAppInfo(url=WEB_APP_URL))],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"), InlineKeyboardButton("‚úâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±—Ä–∞—Ç—å –¥–∏–∑–∞–π–Ω!",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /help (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_message = (
        "‚ùì –ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç:\n"
        "1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ö–∞—Ç detergents –¥–∏–∑–∞–π–Ω–æ–≤'.\n"
        "2. –í –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã–±–µ—Ä–∏ –¥–∏–∑–∞–π–Ω.\n"
        "3. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –≤ —á–∞—Ç.\n"
        "4. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é –∑–∞—è–≤–∫—É, –∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è.\n\n"
        "–í–æ–ø—Ä–æ—Å—ã? –ù–∞–∂–º–∏ '‚úâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'!"
    )
    await update.message.reply_text(help_message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "help":
        help_message = (
            "‚ùì –ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç:\n"
            "1. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ö–∞—Ç–∞–ª–æ–≥ –¥–∏–∑–∞–π–Ω–æ–≤'.\n"
            "2. –í –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã–±–µ—Ä–∏ –¥–∏–∑–∞–π–Ω.\n"
            "3. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–æ–º–µ—Ä –¥–∏–∑–∞–π–Ω–∞ –≤ —á–∞—Ç.\n"
            "4. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é –∑–∞—è–≤–∫—É, –∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è.\n\n"
            "–í–æ–ø—Ä–æ—Å—ã? –ù–∞–∂–º–∏ '‚úâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'!"
        )
        await query.message.reply_text(help_message)
    elif query.data == "ask":
        context.user_data["waiting_for_question"] = True
        await query.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É! üòä")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—è–≤–∫–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message_text = update.message.text.strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message_text.startswith("/"):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å
    if context.user_data.get("waiting_for_question", False):
        # –≠—Ç–æ –≤–æ–ø—Ä–æ—Å
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–í–æ–ø—Ä–æ—Å –æ—Ç {user.first_name} (@{user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'}):\n{message_text}"
            )
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ, {user.first_name}! –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –°–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è! üòä"
            )
            context.user_data["waiting_for_question"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await update.message.reply_text(
                "üòî –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü–æ–º–æ—â—å'."
            )
    else:
        # –≠—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n–û—Ç: {user.first_name} (@{user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'})\n–î–∏–∑–∞–π–Ω: {message_text}"
            )
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ, {user.first_name}! –ó–∞—è–≤–∫–∞ –Ω–∞ '{message_text}' –ø—Ä–∏–Ω—è—Ç–∞. –°–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è! üòä"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
            await update.message.reply_text(
                "üòî –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü–æ–º–æ—â—å'."
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text(
            "üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü–æ–º–æ—â—å'."
        )

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("catalog", catalog))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()